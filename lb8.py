import telebot
from telebot import types
import json

TOKEN = ""
bot = telebot.TeleBot(TOKEN)

CLICK_FILE = "click_count.json"


try:
    with open(CLICK_FILE, "r", encoding="utf-8") as f:
        click_count = json.load(f)
except FileNotFoundError:
    click_count = {}

def update_click_count(button):
    if button in click_count:
        click_count[button] += 1
    else:
        click_count[button] = 1
    with open(CLICK_FILE, "w", encoding="utf-8") as f:
        json.dump(click_count, f, ensure_ascii=False, indent=4)

@bot.message_handler(commands=['start'])
def start(m):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['üé¨–§–∏–ª—å–º—ã', 'üì∫–°–µ—Ä–∏–∞–ª—ã', '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ', '–ü–æ–º–æ—â—å']
    keyboard.add(*[types.KeyboardButton(name) for name in buttons])
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text in ['üé¨–§–∏–ª—å–º—ã', 'üì∫–°–µ—Ä–∏–∞–ª—ã', '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ', '–ü–æ–º–æ—â—å'])
def main_menu(m):
    update_click_count(m.text)
    if m.text == 'üé¨–§–∏–ª—å–º—ã':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–ë–æ–µ–≤–∏–∫–∏', '–ö–æ–º–µ–¥–∏–∏', '–î—Ä–∞–º—ã', '–ù–∞–∑–∞–¥']
        keyboard.add(*[types.KeyboardButton(name) for name in buttons])
        bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–æ–≤:', reply_markup=keyboard)
    elif m.text == 'üì∫–°–µ—Ä–∏–∞–ª—ã':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['–§—ç–Ω—Ç–µ–∑–∏', '–î–µ—Ç–µ–∫—Ç–∏–≤—ã', '–¢—Ä–∏–ª–ª–µ—Ä—ã', '–ù–∞–∑–∞–¥']
        keyboard.add(*[types.KeyboardButton(name) for name in buttons])
        bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä —Å–µ—Ä–∏–∞–ª–æ–≤:', reply_markup=keyboard)
    elif m.text == '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ':
        bot.send_message(m.chat.id, '–°–µ–π—á–∞—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã: "–î—é–Ω–∞ 2", "–í–µ–¥—å–º–∞–∫", "–õ–æ–∫–∏"')
    elif m.text == '–ü–æ–º–æ—â—å':
        bot.send_message(m.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.')

@bot.message_handler(func=lambda message: message.text in ['–ë–æ–µ–≤–∏–∫–∏', '–ö–æ–º–µ–¥–∏–∏', '–î—Ä–∞–º—ã', '–§—ç–Ω—Ç–µ–∑–∏', '–î–µ—Ç–µ–∫—Ç–∏–≤—ã', '–¢—Ä–∏–ª–ª–µ—Ä—ã', '–ù–∞–∑–∞–¥'])
def submenu(m):
    update_click_count(m.text)
    if m.text == '–ë–æ–µ–≤–∏–∫–∏':
        bot.send_message(m.chat.id, '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: "–î–∂–æ–Ω –£–∏–∫", "–ë–µ–∑—É–º–Ω—ã–π –ú–∞–∫—Å"')
    elif m.text == '–ö–æ–º–µ–¥–∏–∏':
        bot.send_message(m.chat.id, '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: "–ö–ª–∏–∫", "–ú–∞—Å–∫–∞"')
    elif m.text == '–î—Ä–∞–º—ã':
        bot.send_message(m.chat.id, '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: "–ó–µ–ª–µ–Ω–∞—è –º–∏–ª—è", "1+1"')
    elif m.text == '–§—ç–Ω—Ç–µ–∑–∏':
        bot.send_message(m.chat.id, '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü", "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä"')
    elif m.text == '–î–µ—Ç–µ–∫—Ç–∏–≤—ã':
        bot.send_message(m.chat.id, '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: "–®–µ—Ä–ª–æ–∫", "–ù–∞—Å—Ç–æ—è—â–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤"')
    elif m.text == '–¢—Ä–∏–ª–ª–µ—Ä—ã':
        bot.send_message(m.chat.id, '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: "–°–µ–º—å", "–û—Å—Ç—Ä–æ–≤ –ø—Ä–æ–∫–ª—è—Ç—ã—Ö"')
    elif m.text == '–ù–∞–∑–∞–¥':
        start(m)

@bot.message_handler(commands=['stats'])
def stats(m):
    stats_message = '\n'.join([f'{key}: {value}' for key, value in click_count.items()])
    bot.send_message(m.chat.id, f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏–π:\n{stats_message}')

bot.polling(none_stop=True)
